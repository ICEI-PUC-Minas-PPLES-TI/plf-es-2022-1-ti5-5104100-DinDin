name: Jest API

on:
  push:
    branches: [master]
    paths: 
    - 'Codigo/dindin-api/dindin-app/**'
  pull_request:
    branches: [master]
    paths: 
    - 'Codigo/dindin-api/dindin-app/**'

jobs:

  jest:

      
    name: Jest API CI | OS ${{ matrix.os }} - Node Version ${{ matrix.node-version }} - MySQL 5.7
    runs-on: ${{ matrix.os }}

      
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
        node-version: [14.x, 16.x]

    permissions:
      contents: 'read'
      id-token: 'write'
      
    steps:
      - uses: actions/checkout@v1

      - name: Shutdown Ubuntu MySQL (SUDO)
        run: sudo service mysql stop

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}

      - name: Create node .env file
        working-directory: ./Codigo/dindin-api/dindin-app
        run: |
          touch .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_NAME_TEST=${{ secrets.DB_NAME_TEST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo APP_DEBUG=${{ secrets.APP_DEBUG }} >> .env
          echo NODE_PUBLIC_PORT=${{ secrets.NODE_PUBLIC_PORT }} >> .env
          echo NODE_APP_HOST=${{ secrets.NODE_APP_HOST }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
      
      - name: Create docker .env file
        working-directory: ./Codigo/dindin-api/dindin-app
        run: |
          touch .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_NAME_TEST=${{ secrets.DB_NAME_TEST }} >> .env
          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          workload_identity_provider: 'projects/125881301157/locations/global/workloadIdentityPools/github/providers/github'
          service_account: 'firebase-adminsdk-xmgz0@dindinfinance.iam.gserviceaccount.com'
      
      - name: Set up MySQL 5.7
        uses: mirromutth/mysql-action@v1.1
        with:
          host port: ${{ secrets.DB_PORT }} # Optional, default value is 3306. The port of host
          container port: ${{ secrets.DB_PORT }} # Optional, default value is 3306. The port of container
          character set server: "utf8mb4" # Optional, default value is 'utf8mb4'. The '--character-set-server' option for mysqld
          collation server: "utf8mb4_bin" # Optional, default value is 'utf8mb4_general_ci'. The '--collation-server' option for mysqld
          mysql version: "5.7" # Optional, default value is "latest". The version of the MySQL
          mysql database: ${{ secrets.DB_NAME_TEST }} # Optional, default value is "test". The specified database which will be create
          mysql root password: ${{ secrets.DB_PASSWORD }} # Required if "mysql user" is empty, default is empty. The root superuser password
          mysql user: ${{ secrets.DB_USER }} # Required if "mysql root password" is empty, default is empty. The superuser for the specified database. Can use secrets, too
          mysql password: ${{ secrets.DB_PASSWORD }} # Required if "mysql user" exists. The password for the "mysql user"

      - name: npm install, build, and test
        working-directory: ./Codigo/dindin-api/dindin-app
        run: |
          npm install
          npm test
        env:
          CI: true
