name: Docker Compose API

on:
  push:
    branches: [master]
    paths: 
    - 'Codigo/dindin-api/**'
  pull_request:
    branches: [master]
    paths: 
    - 'Codigo/dindin-api/**'

jobs:
  docker:
    name: Docker-compose API CI | OS ${{ matrix.os }}
    timeout-minutes: 30
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Create node .env file
        working-directory: ./Codigo/dindin-api/dindin-app
        run: |
          touch .env
          echo DB_HOST=${{ secrets.DB_HOST }} >> .env
          echo DB_USER=${{ secrets.DB_USER }} >> .env
          echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
          echo DB_NAME=${{ secrets.DB_NAME }} >> .env
          echo DB_NAME_TEST=${{ secrets.DB_NAME_TEST }} >> .env
          echo DB_PORT=${{ secrets.DB_PORT }} >> .env
          echo APP_DEBUG=${{ secrets.APP_DEBUG }} >> .env
          echo NODE_PUBLIC_PORT=${{ secrets.NODE_PUBLIC_PORT }} >> .env
          echo NODE_APP_HOST=${{ secrets.NODE_APP_HOST }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env

      - name: Create docker .env file
        working-directory: ./Codigo/dindin-api/
        run: |
          touch .env
          echo MYSQLDB_USER=${{ secrets.MYSQLDB_USER }} >> .env
          echo MYSQLDB_ROOT_PASSWORD=${{ secrets.MYSQLDB_ROOT_PASSWORD }} >> .env
          echo MYSQLDB_DATABASE=${{ secrets.MYSQLDB_DATABASE }} >> .env
          echo MYSQLDB_LOCAL_PORT=${{ secrets.MYSQLDB_LOCAL_PORT }} >> .env
          echo MYSQLDB_DOCKER_PORT=${{ secrets.MYSQLDB_DOCKER_PORT }} >> .env
          echo NODE_LOCAL_PORT=${{ secrets.NODE_LOCAL_PORT }} >> .env
          echo APP_DEBUG=${{ secrets.APP_DEBUG }} >> .env
          echo NODE_PUBLIC_PORT=${{ secrets.NODE_PUBLIC_PORT }} >> .env
          echo NODE_APP_HOST=${{ secrets.NODE_APP_HOST }} >> .env
          echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env

      - name: Start containers
        run: docker-compose -f "docker-compose.ci.yml" up -d --build
        working-directory: ./Codigo/dindin-api/
        env:
          CI: true

      - name: Stop containers
        if: always()
        run: docker-compose -f "docker-compose.yml" down
        working-directory: ./Codigo/dindin-api/
